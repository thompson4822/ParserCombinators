HanDeviceTypeEnum[Utility->drevents] {
	None,
	PCT,
	LCS
}

HanStatusTypeEnum[Utility->participation] {
	None,
	Inactive,
	Active
}

HanDeviceStatusBitsFlags[Utility->drevents] {
	None,
	Status,
	Repair,
	SecInit,
	SecAuth,
	Unused,
	Secure,
	Rejoin,
	HighSec
}

ParticipationStatusTypeEnum[Utility->participation] {
	None,
	Candidate,
	Approved,
	PendingApproval,
	Active,
	Denied,
	OptedOut,
	Deactivated
}

CustomerHanSummaryStatisticDto[Utility->participation] {}

HanFilterCriteriaDto[Utility->participation] {
	List<ParticipationStatusTypeEnum> ParticipationStatus
	List<long> HanPrograms
	string LastName
	string FirstName
	string ServiceAddress
	string UserName
}

DeviceDto[Utility->device]{}

HanCustomerDto[Utility->participation] {
	long CustomerAdministrationId
	string LastName
	string FirstName
	string ServiceAddress
	string SignInName
	ParticipationStatusTypeEnum ParticipationStatus
	long HanParticipationId
	int ProgramId
	string ParticipationStatusNotes
}

CustomerHanProgramDto[Utility->participation] {
	decimal ACSizeInTons
	decimal WaterHeaterSizeInGallons
	decimal HouseSizeInSquareFeet
	List<HanCustomerDto> HanCustomers	
}

ParticipationService[Utility->participation]{
	List<HanCustomerDto> GetParticipationStatus(HanFilterCriteriaDto hanFilterCriteriaDto)
	CustomerHanSummaryStatisticDto GetParticipationStatusSummaryStatistics()
	bool OptIn(CustomerOptInDto customerOptInDto)
	CustomerHanProgramDto GetCustomerPrograms(long customerAdministrationId)
	bool Approve(List<ParticipationApprovalDto> participationApprovals)
}

HanParticipationDao {
	HanParticipation FindByCustomerAndProgram(long customerAdministrationId, long hanProgramId)
}

ProgramParticipationDao {
        List<ProgramParticipation> Search(ParticipationFilterCriteria filterCriteria)
}

CustomerHanSummaryStatisticDao {}

CustomerHanDao {}

HanDeviceDao {}

DstOffsetDao {
	IList<DstOffset> GetOffsets(DateTime startTime, DateTime endTime)
}

ArkNETMessageDeliveryDao {
	ArkNETMessageDelivery FindByCustomerAdministrationId(long customerAdministrationId)
}

ParticipationFactory {

	inject ProgramParticipationDao programParticipationDao
	inject CustomerHanSummaryStatisticDao customerHanSummaryStatisticDao
	inject DstOffsetDao dstOffsetDao
	inject CustomerHanDao customerHanDao
	inject HanParticipationDao hanParticipationDao
	inject WorkOrderDao workOrderDao
	inject ExternalCommunicationFactory externalCommunicationFactory
}

UpdateHanFactory {

	inject ArkNETMessageDeliveryDao arkNetMessageDeliveryDao
	inject IncomingMessageHandlerFactory incomingMessageHandlerFactory
}

CustomerOptInDto[Utility->participation] {
	long CustomerAdministrationId
	string PreferredInstallTime
	List<long> ProgramIds
	decimal ACSizeInTons
	decimal WaterHeaterSizeInGallons
	decimal HouseSizeInSquareFeet
	string Notes
	long ApproverId
}

ParticipationApprovalDto[Utility->participation]{
	long HanProgramId
	long CustomerAdministrationId
	bool IsApproved
	string ReasonForDenial
	long ApproverId
}

WorkOrderStatusDto[Utility->workOrder] {

	long WorkOrderStatusId
	long WorkOrderId
	DateTime WorkOrderDate
	long WorkOrderStatusTypeId
	string Notes
	long InstallerId

}

WorkOrderDto[Utility->workOrder] {

	long WorkOrderId
	long CustomerHanId
	string ServiceAddress
	string PreferredTime
	string ContactInformation
	string Notes
	DateTime InstallDate
	long InstallerId
	string CustomerFirstName
	string CustomerLastName
	string MeterAccountInfoId
	WorkOrderStatusDto CurrentWorkOrderStatus
	IList<WorkOrderStatusDto> WorkOrderStatusDto

}

WorkOrderService[Utility->workOrder] {

	WorkOrderDto GetWorkOrderById(long workOrderId)
	IList<WorkOrderDto> GetWorkOrdersByInstallerId(long installerId)
	WorkOrderDto SaveWorkOrder(WorkOrderDto workOrderDto)
	WorkOrderStatusDto SaveWorkOrderStatus(WorkOrderStatusDto workOrderStatusDto)

}

WorkOrderDao {}

WorkOrderStatusDao {}

WorkOrderDetailDao {}

WorkOrderFactory {

	inject WorkOrderDao workOrderDao
	inject WorkOrderStatusDao workOrderStatusDao
	inject WorkOrderDetailDao workOrderDetailDao

}

UpdateHanService[Utility->updateHan] {
	HanStatusTypeEnum GetCurrentHanStatus(long consumerId)
}

HanProgramDto[Utility->participation] {
	long HanProgramId
	string Name
	string ShortName
	IList<HanParticipationDto> HanParticipations
	IList<HanProgramHanDeviceTypeDto> HanProgramHanDeviceTypes
}

ParticipationStatusDto[Utility->participation] {
	long ParticipationStatusId
	int Status
	DateTime DateCreated
	long HanParticipationId
	string Notes
}
CustomerEmailDto[Utility->participation]{
        long CustomerEmailId
        long CustomerId
        string Email
        bool IsPrimary
}

HanParticipationDto[Utility->participation] {
	long HanParticipationId
	long CustomerAdministrationId
	HanProgramDto HanProgramDto
	IList<ParticipationStatusDto> ParticipationStatusDtos 
}

HanProgramHanDeviceTypeDto[Utility->participation] {
	long HanProgramHanDeviceTypeId
	HanProgramDto HanProgramDto
	long HanDeviceTypeId
}

HanProgramService[Utility->participation] {
	IList<HanProgramDto> GetAllHanPrograms()
}

HanProgramDao {}

HanProgramFactory {
	inject HanProgramDao hanProgramDao
}

HanDeviceStatusDto[Utility->hanhealth] {
	long Id
	HanHealthEnum DeviceHealth
	DateTime WhenMeasured
	int TransmitCounter
	string DeviceName
	int LinkQuality
	HanDeviceStatusBitsFlags StatusBits
	int Status
	
}

HanHealthEnum[Utility->hanhealth] {
	None,
	Red,
	Yellow,
	Green
}

BridgeStatusDto[Utility->hanhealth] {
	string DeviceName
	DateTime WhenMeasured
	int LinkRepair
	int Status
	HanHealthEnum DeviceHealth
}

HanHealthDto[Utility->hanhealth] {
	string UserName
	long CustomerHanId
	string FirstName
	string LastName
	string ServiceAddress
	HanHealthEnum HanHealth
	DateTime HanHealthLastUpdatedDate
	int CurrentHanHealth
	IList<HanDeviceStatusDto> DeviceHealthList
	BridgeStatusDto BridgeStatus
}

HanHealthFilterDto[Utility->hanhealth] {
	string UserName
	List<HanHealthEnum> HanHealthList
	string FirstName
	string LastName
	string ServiceAddress
}

HanHealthDao {
	IList<HanHealth> Search(HanHealthFilterCriteria filterCriteria)
}

HanBridgeDao
{
}

HanHealthFactory {
	inject DstOffsetDao dstOffsetDao
	inject HanHealthDao hanHealthDao
	inject HanBridgeDao hanBridgeDao
}

HanHealthService[Utility->statistics] {
	IList<HanHealthDto> GetHanHealthFilter(HanHealthFilterDto filter)
}

SummaryStatisticsFactory {
	inject SummaryStatisticsDao summaryStatisticsDao
}
SummaryStatisticsDao{
}

SummaryStatisticsDto[Utility->statistics] {
	decimal PercentGreen
	decimal PercentYellow
	decimal PercentRed
	int     TotalMiAccountUsers
	int     SmartMeterUsers
	decimal SmartMeterPercent
	int     CandidateUsers
	decimal CandidatePercent
	int     MiHanEnrolledUsers
	decimal MiHanEnrolledPercent
	int 	ActiveHANs
	int     OptOutUsers
	decimal OptOutPercent
	int     PendingApproval
	int     Approved
	int     InstallInProgress
	int     ConsumerWait
}

HistoricalStatisticsDto[Utility->statistics] {
	int ConsumerImpactRate
	int AverageDelivery
	int AverageOverrides
}

SummaryStatisticsService[Utility->statistics]
{
	SummaryStatisticsDto GetSummaryStatistics()
	HistoricalStatisticsDto GetHistoricalStatistics()
}

CustomerHanEligibilityDto[Utility->drevents] {
	long CustomerAdministrationId
	long CustomerHanId
	string LastName
	string FirstName
	string ServiceAddress
	EventDeliveryStatusEnum DeliveryStatus
	bool Override
	string AccountId
	decimal ImpactRate
	decimal OverrideRate
	string DeviceName
}

HanDeviceFlags[Utility->drevents] {
	None,
	Pct,
	Lcs
}	

CriticalityEnum[Utility->drevents] {
	Normal,
	Critical
}

DemandResponseEventStatusEnum[Utility->drevents]
{
	Future = 0,
	Active,
	Completed,
	Cancelled,
	Terminated
}

EventDeliveryStatusEnum[Utility->drevents] {
	Delivered,
	Failed,
	Overridden,
	Queued,
	Retrying,
	Sent
}

DateTimeDto[Common->common.date] {
	int Day
	int Month
	int Year
	int Minute
	int Hour
}

DemandResponseEventTypeEnum[Utility->drevents]
{
	LoadControlEvent,
	Cancel,
	CancelAll
}

DREventDto[Utility->drevents] {
	string EventName
	DateTimeDto StartDateTime
	int Duration
	CriticalityEnum Criticality
	DemandResponseEventStatusEnum EventStatus
	decimal PercentDelivered
	decimal PercentOverridden
	long DemandResponseEventId 
	long EventId 
	bool WasCancelled 
	HanDeviceTypeEnum HanDeviceType
	long UtilityEnrollmentGroup
	int TemperatureOffset
	int DutyCycle
	List<long> CustomerHanIds 
	int NumberOfConsumers
	int NumberDelivered
	int NumberOverridden
	bool StartNow 
	DemandResponseEventTypeEnum EventType
}

DREventFilterCriteriaDto[Utility->drevents] {
	string EventName
	CriticalityEnum Criticality
	List<HanDeviceTypeEnum> HanDeviceType
	DateTimeDto StartingDate
	DateTimeDto EndingDate
}

CustomerAdministrationDao
{
}

DeliveredUndeliveredFlags[Utility->drevents] {
	None,
	Delivered,
	Undelivered
}

EligibleCustomerDao
{
	IList<EligibleCustomer> GetEligibleCustomers(HanDeviceTypeEnum hanDeviceType)
}


HanProgramDao{}

DemandResponseEventDao{}

CustomerDemandResponseEventDao{}

CustomerDemandResponseEventStatusDto[Utility->drevents] 
{
	long CustomerDemandResponseEventId
	string AccountID
	string CustomerName
	int DeliveryStatus
	bool IsOverridden
	string ServiceAddress
}

DRWithStatusDto[Utility->drevents]
{
	DREventDto DemandResponseEventDto
	IList<CustomerDemandResponseEventStatusDto> CustomerDemandResponseEventStatusDtos

}

DREventFactory {
	inject CustomerHanDao customerHanDao
	inject CustomerAdministrationDao customerAdministrationDao
	inject EligibleCustomerDao eligibleCustomerDao 
	inject HanProgramDao hanProgramDao
	inject DemandResponseEventDao demandResponseEventDao
	inject CustomerDemandResponseEventDao customerDemandResponseEventDao
	inject DstOffsetDao dstOffsetDao
}

DREventService [Utility->drevents] {
	IList<CustomerHanEligibilityDto> GetEligibleCustomers(HanDeviceTypeEnum hanDeviceType)
	IList<DREventDto> GetMatchingEvents(DREventFilterCriteriaDto searchCriteria)
	DRWithStatusDto GetEventDetails(long eventId) 
	DREventDto CreateDREvent(DREventDto newEvent)
	DREventDto TerminateCancelDemandResponseEvent(DREventDto demandResponseEvent)
}


